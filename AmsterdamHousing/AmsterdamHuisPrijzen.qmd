---
title: "AmsterdamHuisPrijzen"
format: html
author: Rens van Dijck
editor: visual
---

## Setup

```{r}
library(tidyverse)
library(dplyr)
library(markdown)
library(texreg)
library(ggplot2)
library(scales)
library(leaflet)
library(leaflet.extras)
library(htmltools)
library(class)
library(corrplot)
library(caret)
```

## Loading dataset

```{r}
csv <- "C:/Users/Rens/Documents/R_projects/DataMinor/Indv project/HousingPrices-Amsterdam-August-2021.csv"
housing_df <- read.csv(csv)
```

## Business understanding

Recently I've been looking at housing prices where I live and thought I can do something with that in this assignment. I couldn't find the housing prices of Arnhem so I went for a data set containing Amsterdam housing prices. With this data, data mining and machine learning can be used to predict the housing price based on the characteristics of a house. For this project the KNN model will be used to predict housing prices in Amsterdam.

## Data understanding

```{r}
str(housing_df)
summary(housing_df)
head(housing_df)
```

As can be seen in above, the data set has 924 rows of housing price data, consisting of 8 columns. Already it is clear there is some missing data, since price has 4 NA values.

```{r}
sum(is.na(housing_df$Price))
```

## Data preparation

Clearing out the NA values.

```{r}
clean_df <- na.omit(housing_df)
sum(is.na(clean_df))
```

Removing the primary key in the data set because it is not needed.

```{r}
clean_df <- clean_df[,-1]
```

## Graphs and plots

Scatter plot with on the Y-axis the Price of the houses, on the X-axis the area in m2, and the hue is dependent on the amount of rooms in the house.

```{r}
ggplot(clean_df, aes(x = Area, y = Price, color = Room)) + 
  geom_point()
```

The same scatter plot as above but with a max price of 2.000.000, a max area of 250 and only houses with max 6 rooms have a color. The 42 rows containing missing values are the geom_points with no color.

```{r}
ggplot(clean_df, aes(x = Area, y = Price, color = Room)) + 
  geom_point() + scale_y_continuous(limits = c(0, 2000000)) + scale_x_continuous(limits = c(0, 250)) + scale_color_continuous(limits = c(0,6))
```

Two leaflets using the latitude and longitude coordinates to visualize the house prices in Amsterdam. The color palette used YlOrRd gives a gradient from pale yellow up to dark red.The first leaflet doesn't really give a lot of information with the color gradient, but does give all the data points a visual location. Also a label is added to each data point giving the Address and Price of the house.

```{r}
leaflet_df <- clean_df
colorLeaflet <- colorNumeric(palette = "YlOrRd", leaflet_df$Price)
label <- paste("<strong>", leaflet_df$Address, "</strong><br>Price: ", leaflet_df$Price) %>% lapply(htmltools::HTML)

leaflet(leaflet_df) %>% 
  addTiles() %>% 
  addCircles(~Lon, ~Lat, 
             color = colorLeaflet(leaflet_df$Price),
             opacity = 1,
             label = ~label
                   )

```

In the second leaflet only houses with a max price of 2.000.000 are used. Because of this the color gradient is a lot more clear.

```{r}
leaflet_df <- subset(clean_df, Price < 2000000)
colorLeaflet <- colorNumeric(palette = "YlOrRd", leaflet_df$Price)
label <- paste("<strong>", leaflet_df$Address, "</strong><br>Price: ", leaflet_df$Price) %>% lapply(htmltools::HTML)

leaflet(leaflet_df) %>% 
  addTiles() %>% 
  addCircles(~Lon, ~Lat, 
             color = colorLeaflet(leaflet_df$Price),
             opacity = 1,
             label = ~label
                   )
```

```{r}
ggplot(clean_df, aes(x = Lon, y = Price)) + geom_point() + ggtitle("Price vs Longitude")
ggplot(clean_df, aes(x = Lat, y = Price)) + geom_point() + ggtitle("Price vs Latitude")
ggplot(clean_df, aes(x = Room, y = Price)) + geom_point() + ggtitle("Price vs Rooms")
ggplot(clean_df, aes(x = Area, y = Price)) + geom_point() + ggtitle("Price vs Area")
ggplot(clean_df, aes(x = Area, y = Room)) + geom_point() + ggtitle("Area vs Room")
ggplot(clean_df, aes(x = Lon, y = Lat)) + geom_point() + ggtitle("Longitude vs Latitude")
```

## Data preparation for the model

Here we remove the Address and Zip column as they won't be used in the models.

```{r}
model_df <- clean_df[, -c(1:2)]
```

A correlation plot of the variables used in the models.

```{r}
corrplot(cor(model_df), method = "number", type = "lower")
```

Here the outliers are removed from the variables Price and Area to have a better data set. A 98th quantile is used because it fit the data the best. This was not used in the end because it decreased the accuracy of the model.

```{r}
model_df <- filter(model_df, Price < quantile(Price, 0.98))
model_df <- filter(model_df, Area < quantile(Area, 0.98))
#ggplot(model_df, aes(x = Area, y = Price)) + geom_point()
```

Scaling the independant variables to improve the performance of the KNN model. This was not used in the end but it was used to test if the model performed better when using scaling on the independent variables.

```{r}
model_df[, c("Area", "Room", "Lon", "Lat")] <- scale(model_df[, c("Area", "Room", "Lon", "Lat")])
head(model_df)
```

## Making the model

Here the data is separated in a train set and a test set for the linear regression model. The train set is used to train the model, and the test set later to see how the model performs.

```{r}
set.seed(123)
msplit <- createDataPartition(model_df[, "Price"], p = 0.75, list = FALSE)
train_df <- model_df[msplit,]
test_df <- model_df[-msplit,]
```

The linear regression model is trained. No scaling, polynomial is used because that decreased the accuracy of the model.

```{r}
model_lm <- lm (Price ~ Area + Room + Lon + Lat, data = train_df)
summary(model_lm)
```

```{r}
predict <- predict(model_lm, newdata = test_df)
results <- data.frame(actual = test_df$Price, predicted = predict)
ggplot(results, aes(x = actual, y = predicted)) +
  geom_point() +
  geom_abline()
#plot(test_df$Price, predict)
#abline(lm(test_df$Price ~ predict))


```

```{r}
RMSE(results[, "predicted"], results[, "actual"])
```

## Model to table

```{r}
texreg::wordreg(list(model_lm), file="model1.doc")
```

## KNN Model

```{r}
set.seed(123)
msplit <- createDataPartition(model_df[, "Price"], p = 0.7, list = FALSE)
train_df <- model_df[msplit,]
test_df <- model_df[-msplit,]
```

```{r}
set.seed(123)
msplit <- createDataPartition(model_df[, "Price"], p = 0.7, list = FALSE)
train_df <- model_df[msplit, c("Area", "Room", "Lon", "Lat")]
test_df <- model_df[-msplit, c("Area", "Room", "Lon", "Lat")]
train_price <- model_df[msplit,"Price"]
test_price <- as.factor(model_df[-msplit, "Price"])
test_price <- factor(test_price, levels=levels(as.factor(train_price)))


head(train_df)
head(test_price)
```

```{r}
knn_df <- knn(train = as.matrix(train_df[, c("Area", "Room", "Lon", "Lat")]), test = as.matrix(test_df[, c("Area", "Room", "Lon", "Lat")]), cl = train_df[, "Price"] , k = 32)

predict <- knn_df

```

```{r}

test_df[, "Price"] <- factor(test_df[, "Price"], levels=levels(as.factor(train_df[, "Price"])))
confusion_matrix <- confusionMatrix(as.factor(predict), test_df[, "Price"])
confusion_matrix

#table(predict)
#table(test_price)
```

## 
